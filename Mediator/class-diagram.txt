@startuml class-diagram
interface GameMediator {
    void attack(String playerId, int attackPoints)
    void cure(String playerId, int lifePointsCured)
    void sendMessage(String playerId, String message)
}
class GameServer implements GameMediator {
    - players : List<Player>
    - Player findPlayer(String playerId)
    + void registerPlayer(Player player)
    + void attack(String playerId, int attackPoints)
    + void cure(String playerId, int lifePointsCured)
    + void sendMessage(String playerId, String message)
}
abstract class Player {
    ~ gameServer : GameMediator
    ~ id : String
    ~ lifePoints : int
    - {static} INITIAL_LIFEPOINTS : int
    ~ void reduceLifePoints(int value)
    ~ void addLifePoints(int value)
    ~ void sendMessage(String playerId, String message)
    ~ void {abstract} executeAction(String playerId)
    + String getId()
    + int getLifePoints()
    + boolean isDead()
}
class Soldier extends Player {
    - {static} INITIAL_LIFEPOINTS : int
    ~ void executeAction(String playerId)
}
class Paramedic extends Player {
    - {static} INITIAL_LIFEPOINTS : int
    ~ void executeAction(String playerId)
}
class Main
Main -right-> GameServer : creates
Main -right-> Player : creates
GameServer -[dotted]-> Player : registers
Player::gameServer -left-> GameMediator : communicates-through
GameServer::executeAction -right-> Soldier : attacks,cures...
GameServer::executeAction -right-> Paramedic : attacks,cures...
@enduml
